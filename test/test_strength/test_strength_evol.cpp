/**
   Test the how the strength depth-profile changes given temp generated by creep
   over a long time with no seismic slip.  Each cell is independent and only
   changes if it slips due to creep
 */
#include <iostream>
#include <algorithm>

#include "strength_profile.h"
#include "temperature_profile.h"
#include "creep_law.h"
#include "romberg_integration.h"
#include "fault_cooling.h"
#include "units.h"

/* Constants  */
int Romberg::JMAX = 20;
int Romberg::K = 5;
double Romberg::EPS = 1.0e-10;

/* Fault Width */
double FaultCoolingModel::faultWidth = 10.0*Units::cm;
/* PREM density of crustal rock kg/km^3*/
double FaultCoolingModel::density = 2.6*Units::g/(Units::cm*Units::cm*Units::cm);
/* Diffusivity of rock, can't remember origin */
double FaultCoolingModel::diffusivity = 1.E-2*Units::cm*Units::cm/Units::second;
/* Specific heat capacity for rock, can't remember origin */
double FaultCoolingModel::specHeat = 790*Units::J/(Units::kg*Units::K);

const int nz(32), // number of depth increments
  nT(10000); // number of time steps

const double arrhAmplitude( 6.31E-20 / ( pow(Units::Pa, 3) * Units::second) ), // Amplitude in the Arrhenius relation
  activationEnergy( 150*Units::kJ/Units::mole), // Activation energy at fault surface
  Tsurface( ( 273.15 + 20 ) * Units::K ), // temperature of 283 K at surface
  dTdz( 20 * Units::K/Units::km ), // degrees K per km gradient
  cohesion( 6*Units::MPa ) , // cohesion & max stress drop
  fs( 0.75 ) , // static coeff of friction
  sigmaNgrad( 280*(Units::bar/Units::km) ) , // rate of normal stress increase
  porePgrad( 100*(Units::bar/Units::km) ), // rate of pore pressure increase
  plateVelocity( 35*Units::mm/Units::year ), // velocity of fault loading
  z0(0.0), // minimum depth for depth profile
  dz(17.5*Units::km/nz), // increments for depth
  dx(dz), //dimension of slip surface along strike
  dt(10*Units::year); // time step


//------------------------------------------------------------------------------
int main(int argc, char * argv[]) {

  std::cerr << "Program: " << argv[0] << " No. Args: " << argc << std::endl;

  /*Initialize the strength profile */
  StaticStrengthProfile Strength( cohesion, fs, sigmaNgrad, porePgrad );

  /*Initialize the creep law */
  CreepLaw C( arrhAmplitude, activationEnergy );

  /*Initialize the temperature profile */
  BackgroundTemperatureProfile T( Tsurface, dTdz );

  /*Compute the strain rate */
  double strainrate = plateVelocity/FaultCoolingModel::faultWidth;

  /** Change the output format */
  std::cout.setf(std::ios::scientific);
  std::cout.precision(15);

  /* Get the temperature decay at all times */
  FaultCoolingModel FCM;
  std::vector<double> Tdecay(nT-1);
  for( int i=0; i<nT-1; i++ ){
    /* For temperature from slip during time step i measured at the
       end of time step j, the decay function is Tdecay[j-i]*/
    Tdecay[i] = FCM.integTempDecay( 0.0, dt, (double)(i+1)*dt );
  }

  std::vector<double> maxT(nT-1);

  /*Loop through all depths */
  for( int k=0; k<nz; k++ ){

    double depth = ((double)k+0.5)*dz;

    /* Output the depth */
    std::cout << depth /Units::km;

    /* Get background temperature*/
    double T0 = T(depth);

    /* Get the static  strength */
    double strengthStatic = Strength(depth);

    /* Loop through all times */
    for( int i=0; i<nT-1; i++ ){

      /* Get the temperature from past creep events except this time step*/
      double dT = 0.0;
      for( int j=0; j<i; j++ ) dT += maxT[j] * Tdecay[i-j+1];

      /* Get stress required for creeep at plate velocity */
      double strengthCreep = C.stress( strainrate, T0+dT );

      /* Get the strength based on the min */
      double strength;
      if( strengthStatic < strengthCreep ){
	/* static strength dominates, no slip */
	strength = strengthStatic;
      }
      else{
	strength = strengthCreep;
      }
      /* Compute the heat rate based on slip at the strength level */
      double dqdt = strength*dx*dz*plateVelocity;

      /* Compute the max temperature for this time step */
      maxT[i] = FCM.temperature( dqdt, dx*dz );

      /* Write the temperature profile at the start of this time step*/
      std::cout << " " << T0 + dT ;

      /* Write the strength profile at the start of this time step */
      //std::cout << " "  << strength/Units::MPa;
    }

    std::cout << std::endl;
  }

}
//======================================================================
//######################################################################
//######################################################################
