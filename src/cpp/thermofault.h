#ifndef THERMOFAULT_H_
#define THERMOFAULT_H_
/**
   Class definition for Thermomechanical Fault object.  It is a derived class of
   a Fault object Holds grid of slip cells, their static and evolving
   properties.  */

#include "fault.h"
#include "fault_cooling.h"

//------------------------------------------------------------------------------
/** Data type for storing heat rate at time steps from creep
*/
struct HeatEvent{

  /** Constructor */
  HeatEvent(
            const double &tStart,
            const double &tEnd,
            const std::vector<int> cellIdxs,
            const std::vector<double> heatRates ):
    t1(tStart),
    t2(tEnd),
    failedCellIdxs(cellIdxs),
    cellHeatRates(heatRates) {}

  /** Properties */
  double t1, t2;
  std::vector<int> failedCellIdxs;
  std::vector<double> cellHeatRates;
};

//------------------------------------------------------------------------------
class ThermoFault : public Fault{
public:

  ThermoFault(
        const int &nL, // along-strike number of grid cells
        const int &nD, // down-dip number of grid cells
        const double &dx, // length of a single slip cell
        const double &dz, // height of a single slip cell
        const double &w, // fault width for strain rate calc
        const std::vector<double> &staticStrengths, // Static strength for each slip cell
        const std::vector<double> &dynamicStrengths, // dynamic strength for each slip cell
        const double &dynamicOvershootCoeff, // dynamic overshoot coefficient for fault
        const std::vector<double> &arrheniusAmpl, // amplitude in the arrhenius relation
        const std::vector<double> &stressExpon, // Stress exponent in the arrhenius relation
        const std::vector<double> &actEnergy, // activation energy
        const StiffnessMatrix &K, // Stiffness matrix for the fault
        const std::vector<double> &initStress, // initial temperature for each slip cell
        const std::vector<double> &initTemperature, // initial temperature for each slip cell
        FaultCoolingModel *FCM // Cooling for the fault
        ):
    Fault( nL, nD, dx, dz, w, staticStrengths, dynamicStrengths,
           dynamicOvershootCoeff, arrheniusAmpl, stressExpon, actEnergy, K,
           initStress ),
    _FCM(FCM) ,
    _initTemperature( initTemperature ),
    _heatHistory() {}

  /** Get the temperature for each slip cell on the fault */
  void getTemperature( std::vector<double> &temperature,
                       const double &timeNow ) const;

  /** Compute an earthquake given knowledge of currently critical hypocenter */
  void computeEarthquake( std::vector<double> &stress, // IN: current stress on fault, will be updated
                          double &time, // IN: current time, will be updated
                          const int&iHypo, const int &jHypo, // IN: coordinates of known hypocenter
                          const double &slipVelocity, // IN: velocity of all seismic slip
                          std::vector<double> &totalSlip,  // OUT: slip in each cell during the eqk
                          std::vector<double> &totalHeat ); // OUT: heat in each cell during the eqk

private:
  /** Record an earthquake heat event */
  void recordHeatEvent( const std::vector<double> &totalSlip,
                        const double &t1, const double &t2 );

private:
  std::vector<double> _initTemperature; // initial temperature for each cell

  /* Fault cooling model */
  FaultCoolingModel *_FCM;

  /* history of heat generated by seismic slip in each cell */
  std::vector<HeatEvent> _heatHistory;

};

#endif /*THERMOFAULT_H_*/
