/**
 * Check that the cooling method is working
 *
 * Based on parameters specified here, calculate the heat and cooling from slip
 * on a rectangular slip cell.
 *
 */

#include "units.h"
#include "fault_cooling.h"

#include <iostream>

using namespace std;

int Romberg::JMAX = 20;
int Romberg::K = 5;
double Romberg::EPS = 1.0e-10;

/* PREM density of crustal rock kg/km^3*/
double FaultCoolingModel::density = 2.6*Units::g/(Units::cm*Units::cm*Units::cm);

/* Fault Width */
double FaultCoolingModel::faultWidth = 1.0*Units::cm;

/* Diffusivity of rock, can't remember origin */
double FaultCoolingModel::diffusivity = 1.E-2*Units::cm*Units::cm/Units::second;

/* Specific heat capacity for rock, can't remember origin */
double FaultCoolingModel::specHeat = 790*Units::J/(Units::kg*Units::K);

//------------------------------------------------------------------------------
int main(int argc, char * argv[]) {

  cerr << "Program: " << argv[0] << " No. Args: " << argc << endl;

  /* Set the required variables */
  double dx = (70.0*Units::km)/128; // width of a slip cell
  double dz = (17.5*Units::km)/32; // height of a slip cell
  double slip = 1*Units::m;  // amount of slip
  double stress = 100*Units::MPa; // shear stress during slip

  cout << "\nSpecified Parameters:\n";
  cout << "dx = " << dx << endl;
  cout << "dz = " << dz << endl;
  cout << "slip = " << slip << endl;
  cout << "stress = " << stress << endl;

  double tslip0 = 1*Units::hour; // time of slip starting
  double tslip1 = 1*Units::hour + 10*Units::second; // time of slip starting
  double t0 = 6*Units::hour; // time to record temperature

  cout << "Slip duration time: " << tslip1 - tslip0 << endl;
  cout << "Time to calc temperature after end of slip: " << t0-tslip1 << endl;

  FaultCoolingModel FCM;
  cout << "density = " << FCM.density << endl;
  cout << "fault width = " << FCM.faultWidth << endl;
  cout << "diffusivity = " << FCM.diffusivity << endl;
  cout << "specific heat capacity = " << FCM.specHeat << endl;

  cout << endl << "Results:\n";

  /* Change the output format */
  cout.setf(ios::scientific);
  cout.precision(15);

  //-----------------------------------------------------------

  /*Calculate the heat generated by slip*/
  double heat = (stress*slip*dx*dz);
  cout << "Heat = " << heat << endl;

  double heatrate = heat/(tslip1-tslip0);
  cout << "Heatrate = " << heatrate << endl;

  double dT = FCM.temperature( heatrate, dx*dz, tslip0, tslip1, t0 );
  cout << "dT = " << dT << endl;
}
//======================================================================
