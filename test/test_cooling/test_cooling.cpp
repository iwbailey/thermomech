/**
 * test_cooling.cpp ---
 *
 * Output the cooling over a period of time after generating some heat via slip
 * on a single fault patch
 *
 * Filename: test_cooling.cpp
 * Description:
 * Author: Iain W. Bailey
 * Created: Wed Sep 25 11:31:04 2013 (-0400)
 * Version: 1
 * Last-Updated: Wed Sep 25 11:33:19 2013 (-0400)
 *           By: Iain W. Bailey
 *     Update #: 6
 *

 * Change Log:
 *
 *
 *
 */

#include "romberg_integration.h"
#include "fault_cooling.h"
#include "units.h"
#include <iostream>

using namespace std;

int Romberg::JMAX = 20;
int Romberg::K = 5;
double Romberg::EPS = 1.0e-10;

/* PREM density of crustal rock kg/km^3*/
double FaultCoolingModel::density = 2.6*Units::g/(Units::cm*Units::cm*Units::cm);

/* Fault Width */
double FaultCoolingModel::faultWidth = 10.0*Units::cm;

/* Diffusivity of rock, can't remember origin */
double FaultCoolingModel::diffusivity = 1.E-2*Units::cm*Units::cm/Units::second;

/* Specific heat capacity for rock, can't remember origin */
double FaultCoolingModel::specHeat = 790*Units::J/(Units::kg*Units::K);

//######################################################################
int main(int argc, char * argv[]) {

  cerr << "Program: " << argv[0] << " No. Args: " << argc << endl;

  /* Set the required variables */
  double dx = (70.0*Units::km)/128; // width of a slip cell
  double dz = (17.5*Units::km)/32; // height of a slip cell
  double slip = 1*Units::m;  // amount of slip
  double stress = 100*Units::MPa; // shear stress during slip
  double creepSlipTime = 1*Units::hour;  // time for creep slip
  double creepSlipTime2 = 1*Units::day; // time for second creep slip
  double vRupture = 3.0*Units::km/Units::second; // rupture velocity
  double eqkSlipTime = slip/vRupture;

  cerr << "dx = " << dx << endl;
  cerr << "dz = " << dz << endl;
  cerr << "slip = " << slip << endl;
  cerr << "stress = " << stress << endl;
  cerr << "eqkSlipTime = " << eqkSlipTime << endl;

  double tslip = 0.0*Units::hour; // time of slip starting
  double t0 = 0.0; // time to record temperature

  double dt[4] = {1*Units::second, 1*Units::minute, 1*Units::hour, 1*Units::day};  // interval of temperature recording
  int nt[4] = {60, 59*48, 24*7, 365}; // number of temp recordings

  /*Calculate the heat generated by slip*/
  double heat = stress*slip*dx*dz;
  cerr << "Heat from slip = " << heat << endl;

  /*Calculate the heat rate for the eqk */
  double tEndEqk = tslip + eqkSlipTime;
  double dqdt_eqk = heat/eqkSlipTime;
  cerr << "Heat rate from eqk = " << dqdt_eqk << endl;

  /*Calculate heat rate for the creep*/
  double tEndCreep = tslip + creepSlipTime;
  double dqdt_creep = heat/creepSlipTime;
  cerr << "Heat rate from creep = " << dqdt_creep << endl;

  /*Calculate heat rate for the second creep*/
  double tEndCreep2 = tslip + creepSlipTime2;
  double dqdt_creep2 = heat/creepSlipTime2;
  cerr << "Heat rate from creep 2 = " << dqdt_creep2 << endl;

  /* Change the output format */
  cout.setf(ios::scientific);
  cout.precision(15);

  /* Initialize the cooling model */
  FaultCoolingModel FCM;

  /* Loop through all measurement points */
  double t;
  for( int j=0; j<4; j++ )
    {
      for( int i=0; i<nt[j]; i++ )
	{
	  /* Current time */
	  t = t0 + (double)i*dt[j];

	  /* calc temperature */
	  double dT_eqk  = FCM.temperature( dqdt_eqk, dx*dz, tslip, tEndEqk, t );
	  double dT_creep  = FCM.temperature( dqdt_creep, dx*dz, tslip, tEndCreep, t );
	  double dT_creep2  = FCM.temperature( dqdt_creep2, dx*dz, tslip, tEndCreep2, t );

	  cout << t/Units::hour
	       << "\t " << dT_eqk
	       << "\t " << dT_creep
	       << "\t " << dT_creep2 << endl;

	}
      t0 = t;
    }


}
//======================================================================

//
// test_cooling.cpp ends here
